{"version":3,"sources":["logo.svg","components/amortTable.js","components/calcPage.js","components/calculatorFunc.js","App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","container","maxWidth","margin","maxHeight","width","table","minWidth","pageContainer","backgroundColor","padding","root","color","fontSize","body","footer","AmortTable","paymentData","classes","paymentDetails","map","payment","month","ttlPayment","interestPaid","principlePaid","remainingPrinciple","extraPayment","TableRow","hover","TableCell","align","TableContainer","className","component","Paper","Table","stickyHeader","aria-label","TableHead","xs","id","TableBody","TableFooter","marginTop","textAlign","height","input","CalcPage","useState","loanAmt","interestRate","loanTerm","inputs","setInputs","setPaymentData","handleChange","e","newState","target","name","value","runCalcs","results","payments","balance","currency","extra","console","log","r","v","Math","pow","i","multiply","j","divide","totalInterest","add","subtract","paymentObj","toLocaleString","style","push","calc","Grid","item","sm","TextField","label","type","onChange","placeholder","Button","variant","onClick","appbar","lineHeight","App","AppBar","position","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.eda02c5c.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","\nimport React from 'react'\n\n\nimport { Paper,makeStyles, Table, TableCell, TableContainer, TableHead, TableRow, TableBody, TableFooter} from '@material-ui/core'\n\n  const useStyles = makeStyles({\n          container: {\n            maxWidth: \"800px\",\n            margin: \"5px auto \",\n            maxHeight: \"400px\",\n            width: \"95%\"\n          },\n          table: {\n            minWidth: 650,\n          },\n          pageContainer: {\n            maxWidth: \"800px\",\n            minWidth: \"200px\", \n            margin: \"0 auto\", \n            \"& th\": {\n                backgroundColor: \"#54DEFD\",\n                padding: \"2pt\"\n                } \n          }, \n          root: {\n              backgroundColor: \"#54DEFD\",\n              color: \"white\", \n              \"& th\": {\n                  color: \"white\",\n                  fontSize: \"0.8rem\"\n                }\n          },\n          body: {\n              \"& td\":{\n                  padding: \"1pt\", \n                  fontSize: \"0.8rem\"\n                }\n          }, \n          footer: {\n              margin: \"0 auto\"\n          }\n          \n        });\n\nexport const AmortTable = ({paymentData})=>{\n\n    const classes = useStyles()\n    const paymentDetails = paymentData.map((payment, month) =>  {\n        const { ttlPayment, interestPaid, principlePaid, extraPayment, remainingPrinciple} = payment\n        \n\n        /**\n         * if condition for extra payments \n         * if extra payments foot displays:\n         *  - Base Interest \n         *  - Interest paid\n         *  - Money Saved\n         *  - Months Eary\n         */\n\n\n        return(\n            <TableRow hover key={month}>\n                <TableCell align=\"center\">{month + 1}</TableCell>\n                <TableCell align=\"center\">{ttlPayment}</TableCell>\n                <TableCell align=\"center\">{interestPaid}</TableCell>\n                <TableCell align=\"center\">{principlePaid}</TableCell>\n                <TableCell align=\"center\">{remainingPrinciple}</TableCell>\n            </TableRow>\n        )\n    })\n\n    return (\n        <>\n        <TableContainer className={classes.container} component={Paper}>\n            <Table stickyHeader className={classes.pageContainer} aria-label=\"simple table\" >\n                <TableHead className={classes.root} xs={12}>\n                    <TableRow  id=\"head\">\n                        <TableCell align=\"center\">Month</TableCell>\n                        <TableCell align=\"center\">Payment</TableCell>\n                        <TableCell align=\"center\">Interest</TableCell>\n                        <TableCell align=\"center\">Principle</TableCell>\n                        \n                        <TableCell align=\"center\">Balance</TableCell>\n                    </TableRow>\n                </TableHead>\n                <TableBody className={classes.body} xs={12}>\n                    {paymentDetails}\n                </TableBody>\n            </Table>\n        </TableContainer>\n                <TableFooter className={classes.footer} stickyHeader>\n                    <TableRow>\n                        <TableCell align=\"center\">Months Early 10</TableCell>\n                        <TableCell align=\"center\">Interest Payments 1000000</TableCell>\n                        <TableCell align=\"center\">Savings 11000</TableCell>\n                        <TableCell align=\"center\"></TableCell>\n                        \n                    </TableRow>\n                </TableFooter>\n                </>\n    )\n\n}\n","import React, {useState} from 'react'\nimport {Grid, makeStyles, TextField, Button} from '@material-ui/core'\nimport { AmortTable } from './amortTable'\nimport {calc} from './calculatorFunc'\n\nconst useStyles = makeStyles({\n    container: {\n        marginTop: \"30px\",\n        backgroundColor: \"lightestgrey\",\n        textAlign: \"center\",\n        height: \"100%\"\n    },\n    input: {\n        margin: \"5px\"\n    }\n})\n\nconst testData = [\n    {month: 0, ttlPayment: 1000 , interestPaid: 90, principlePaid: 910, extraPayment: 0, remainingPrinciple: 100000},\n    {month: 1, ttlPayment: 1000 , interestPaid: 90, principlePaid: 910, extraPayment: 0, remainingPrinciple: 90000},\n    {month: 2, ttlPayment: 1000 , interestPaid: 90, principlePaid: 910, extraPayment: 0, remainingPrinciple: 80000},\n    {month: 3, ttlPayment: 1000 , interestPaid: 90, principlePaid: 910, extraPayment: 0, remainingPrinciple: 70000},\n    {month: 4, ttlPayment: 1000 , interestPaid: 90, principlePaid: 910, extraPayment: 0, remainingPrinciple: 60000},\n    {month: 5, ttlPayment: 1000 , interestPaid: 90, principlePaid: 910, extraPayment: 0, remainingPrinciple: 50000},\n    {month: 5, ttlPayment: 1000 , interestPaid: 90, principlePaid: 910, extraPayment: 0, remainingPrinciple: 50000},\n    {month: 5, ttlPayment: 1000 , interestPaid: 90, principlePaid: 910, extraPayment: 0, remainingPrinciple: 50000},\n    {month: 5, ttlPayment: 1000 , interestPaid: 90, principlePaid: 910, extraPayment: 0, remainingPrinciple: 50000},\n    {month: 5, ttlPayment: 1000 , interestPaid: 90, principlePaid: 910, extraPayment: 0, remainingPrinciple: 50000},\n    {month: 5, ttlPayment: 1000 , interestPaid: 90, principlePaid: 910, extraPayment: 0, remainingPrinciple: 50000},\n    {month: 5, ttlPayment: 1000 , interestPaid: 90, principlePaid: 910, extraPayment: 0, remainingPrinciple: 50000},\n    {month: 5, ttlPayment: 1000 , interestPaid: 90, principlePaid: 910, extraPayment: 0, remainingPrinciple: 50000},\n    {month: 5, ttlPayment: 1000 , interestPaid: 90, principlePaid: 910, extraPayment: 0, remainingPrinciple: 50000},\n    {month: 5, ttlPayment: 1000 , interestPaid: 90, principlePaid: 910, extraPayment: 0, remainingPrinciple: 50000},\n    {month: 5, ttlPayment: 1000 , interestPaid: 90, principlePaid: 910, extraPayment: 0, remainingPrinciple: 50000},\n    {month: 5, ttlPayment: 1000 , interestPaid: 90, principlePaid: 910, extraPayment: 0, remainingPrinciple: 50000},\n    {month: 5, ttlPayment: 1000 , interestPaid: 90, principlePaid: 910, extraPayment: 0, remainingPrinciple: 50000},\n    {month: 5, ttlPayment: 1000 , interestPaid: 90, principlePaid: 910, extraPayment: 0, remainingPrinciple: 50000},\n    {month: 5, ttlPayment: 1000 , interestPaid: 90, principlePaid: 910, extraPayment: 0, remainingPrinciple: 50000},\n    {month: 5, ttlPayment: 1000 , interestPaid: 90, principlePaid: 910, extraPayment: 0, remainingPrinciple: 50000},\n    {month: 5, ttlPayment: 1000 , interestPaid: 90, principlePaid: 910, extraPayment: 0, remainingPrinciple: 50000},\n    {month: 5, ttlPayment: 1000 , interestPaid: 90, principlePaid: 910, extraPayment: 0, remainingPrinciple: 50000},\n    {month: 5, ttlPayment: 1000 , interestPaid: 90, principlePaid: 910, extraPayment: 0, remainingPrinciple: 50000},\n    {month: 5, ttlPayment: 1000 , interestPaid: 90, principlePaid: 910, extraPayment: 0, remainingPrinciple: 50000},\n    {month: 5, ttlPayment: 1000 , interestPaid: 90, principlePaid: 910, extraPayment: 0, remainingPrinciple: 50000},\n]\n\nexport const CalcPage = () => {\n\n    // const [loanAmt, setLoanAmt] = useState(\"\")\n    // const [interestRate, setInterestRate] = useState(\"\")\n    // const [loanTerm, setLoanTerm] = useState(\"\")\n    const [inputs, setInputs] = useState({loanAmt: \"\", interestRate: \"\", loanTerm: \"\", extraPayment: \"\"})\n    const [paymentData, setPaymentData] = useState([])\n/**Calculations\n *  - set a state variable as array to store individual payments\n *  - if extra payments is blank run calcs\n *  - if extrapayments run base calc to get total interest paid amount\n *      - run extra calc to incorporate extrapayments\n */\n\n    const classes = useStyles()\n\n    const handleChange = (e)=> {\n        let newState ={...inputs, [e.target.name]: e.target.value}\n        return setInputs(newState)\n\n    }\n\n    const runCalcs = (e) =>  {\n        \n        let results = calc(inputs)\n        setPaymentData(results)\n\n    }\n\n    const {loanAmt, interestRate, loanTerm, extraPayment} = inputs\n\n    return (\n\n        <Grid container className={classes.container}>\n            <Grid item xs={false} sm={2}></Grid>\n            <Grid item xs={12} sm={8}> \n            <Grid container>\n            <Grid item xs={12} sm={6}>\n                <TextField className={classes.input} label=\"Loan Amount\" type=\"text\"\n                    onChange={handleChange}\n                    value={loanAmt}\n                    name=\"loanAmt\"\n                    placeholder=\"No Commas or Periods\"\n                    \n                    />\n            </Grid>\n            <Grid item xs={12} sm={6}>\n                <TextField className={classes.input} label=\"Interest Rate\" type=\"text\"\n                    onChange={handleChange}\n                    value={interestRate}\n                    name={\"interestRate\"}\n                    placeholder=\"ex.) 4.5\"\n                    \n                    />\n            </Grid>\n            <Grid item xs={12} sm={6}>\n                <TextField className={classes.input} label=\"Loan Term\" type=\"text\"\n                    onChange={handleChange}\n                    value={loanTerm}\n                    name={\"loanTerm\"}\n                    placeholder=\"Enter Term in Months\"\n                    \n                    />\n            </Grid>\n            <Grid item xs={12} sm={6}>\n                <TextField className={classes.input} label=\"Extra Payment\" type=\"text\"\n                    onChange={handleChange}\n                    value={extraPayment}\n                    name={\"extraPayment\"}\n                    placeholder=\"No Commas or Periods\"\n                    \n                    />\n            </Grid>\n            <Grid item xs={false} sm={4}/>\n            \n            <Grid item xs={false} sm={4}/>\n                <AmortTable paymentData={paymentData}/>\n            </Grid>\n\n            </Grid>\n            <Grid item xs={false} sm={2}></Grid>\n            <Grid style={{margin: \"8px auto\", }} item xs={12} sm={4}>\n                <Button  variant=\"outlined\" color=\"primary\" onClick={(e)=>runCalcs(e)}>Calculate</Button>\n            </Grid>\n        </Grid>\n    )\n}","import currency from 'currency.js'\n\n/**\n * M = P[r(1+r)^n/((1+r)^n)-1)]\n\nM = the total monthly mortgage payment\nP = the principal loan amount\nr = your monthly interest rate. Lenders provide you an annual \nrate so you’ll need to divide that figure by 12 (the number of months in a year) \nto get the monthly rate. \nIf your interest rate is 5%, your monthly rate would be 0.004167 (0.05/12=0.004167).\nn = number of payments over the loan’s lifetime. \nMultiply the number of years in your loan term by 12 \n(the number of months in a year) to get the number of total payments for your loan. \nFor example, a 30-year fixed mortgage would have 360 payments (30x12=360).\n */\n\n\n \n\n    \n export const calc = ({loanAmt, interestRate, loanTerm, extraPayment = 0}) => {\n    let payments = []\n    let balance = currency(loanAmt).value\n    let extra = extraPayment * 1\n    console.log(balance, extra)\n\n    let r = ((interestRate/100) /12)\n    // let i = (balance * r * Math.pow(1 + r, loanTerm))\n    let v = r * Math.pow(1 + r, loanTerm)\n    let i = currency(balance).multiply(v) \n    let j = Math.pow(1 + r,  loanTerm) - 1\n    console.log(balance, i.value)\n    let payment = currency(i).divide(j)\n    console.log(payment)\n\n    let totalInterest = 0\n    \n    /**\n     * calculate interest savings with extra payments\n     *  - if extra payments > 0\n     *  - run a base calc without extra payments and sum intrest values into a variable\n     *  - compare two calcs\n     *  - do same with number of months\n     */\n    \n\n    while (balance > 0){\n        let checker = payment.value\n        if ( checker < balance){\n        let ttlPayment = payment.add(extra)\n        let interestPaid = currency(balance).multiply(r)\n            totalInterest += interestPaid.value\n        let principlePaid = ttlPayment.subtract(interestPaid)\n            balance = currency(balance).subtract(principlePaid).value\n           console.log()     \n              \n        let paymentObj = {\n            \n            ttlPayment: ttlPayment.value.toLocaleString('en-US', {style: \"currency\", currency: \"USD\"}) ,\n            interestPaid: interestPaid.value.toLocaleString('en-US', {style: \"currency\", currency: \"USD\"}),  \n            principlePaid: principlePaid.value.toLocaleString('en-US', {style: \"currency\", currency: \"USD\"}), \n            extraPayment: extra,\n            remainingPrinciple: balance.toLocaleString('en-US', {style: \"currency\", currency: \"USD\"})\n        }\n        payments.push(paymentObj)\n    }\n        else {\n            let ttlPayment = balance \n            let interestPaid = currency(balance).multiply(r)\n            totalInterest += interestPaid.value\n            let principlePaid = ttlPayment - interestPaid\n            balance = 0\n\n            let paymentObj = {\n            \n            ttlPayment: ttlPayment.toLocaleString('en-US', {style: \"currency\", currency: \"USD\"}),\n            interestPaid: interestPaid.value.toLocaleString('en-US', {style: \"currency\", currency: \"USD\"}),  \n            principlePaid: principlePaid.toLocaleString('en-US', {style: \"currency\", currency: \"USD\"}), \n            extraPayment: extra,\n            remainingPrinciple: balance.toLocaleString('en-US', {style: \"currency\", currency: \"USD\"})\n        }\n        payments.push(paymentObj)\n        }\n        console.log(totalInterest)\n    }\n\n    return payments\n    // while (loanAmt > 0){\n    //     // if (payment < loanAmt){\n    //         let ttlPayment = (payment + (extraPayment * 1)).toFixed(2) * 1\n    //     let interestPaid = (loanAmt * r ).toFixed(2) * 1\n    //     let principlePaid = (payment + extraPayment - interestPaid).toFixed(2) * 1\n    //         loanAmt = (loanAmt - (principlePaid+extraPayment)).toFixed(2) * 1\n    //     let paymentObj = {\n            \n    //         ttlPayment, \n    //         interestPaid, \n    //         principlePaid, \n    //         extraPayment,\n    //         remainingPrinciple: loanAmt\n    //     }\n    //     payments.push(paymentObj)}\n    // //     else {\n    // //         payment = loanAmt\n    // //     }\n    // // }\n\n    // return payments\n}\n \n","import logo from './logo.svg';\nimport './App.css';\nimport { CalcPage } from './components/calcPage';\nimport {AppBar, Toolbar, makeStyles} from '@material-ui/core'\n\n\nconst useStyles = makeStyles({\n  appbar: {\n    textAlign: \"center\",\n    height: \"30px\",\n    lineHeight: \"30px\"\n  }\n})\n\nfunction App() {\n  const classes = useStyles()\n  return (\n    <>\n    <AppBar className={classes.appbar} position=\"fixed\"> Mortagage Calculator\n      \n    </AppBar>\n      <CalcPage/>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}