{"version":3,"sources":["components/amortTable.js","components/calcPage.js","components/calculatorFunc.js","App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","container","maxWidth","margin","maxHeight","width","position","table","minWidth","pageContainer","backgroundColor","padding","root","color","fontSize","body","footer","textAlign","AmortTable","paymentData","scheduledInterest","totalInterest","loanTerm","extraPayment","classes","paymentDetails","map","payment","month","ttlPayment","interestPaid","principlePaid","remainingPrinciple","TableRow","hover","TableCell","align","TableContainer","className","component","Paper","Table","stickyHeader","aria-label","TableHead","xs","id","TableBody","length","savings","parseFloat","toLocaleString","style","currency","summaryFooter","marginTop","height","input","CalcPage","useState","loanAmt","interestRate","inputs","setInputs","setPaymentData","setScheduledInterest","setTotalInterest","displayTable","setDisplayTable","handleChange","e","newState","target","name","value","runCalcs","results","payments","balance","scheduledBalance","extra","r","v","Math","pow","i","multiply","j","divide","interest","checker2","princePayment","subtract","calcScheduled","add","paymentObj","push","calc","Grid","item","sm","TextField","label","type","onChange","placeholder","Button","variant","onClick","appbar","lineHeight","App","AppBar","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.297771d0.chunk.js","sourcesContent":["\nimport React from 'react'\n\n\nimport { Paper,makeStyles, Table, TableCell, TableContainer, TableHead, TableRow, TableBody} from '@material-ui/core'\n\n  const useStyles = makeStyles({\n          container: {\n            maxWidth: \"800px\",\n            margin: \"5px auto \",\n            maxHeight: \"400px\",\n            width: \"95%\", \n            position: \"relative\"\n          },\n          table: {\n            minWidth: 650,\n          },\n          pageContainer: {\n            maxWidth: \"800px\",\n            minWidth: \"200px\", \n            margin: \"0 auto\", \n            \"& th\": {\n                backgroundColor: \"#54DEFD\",\n                padding: \"2pt\"\n                } \n          }, \n          root: {\n              backgroundColor: \"#54DEFD\",\n              color: \"white\", \n              \"& th\": {\n                  color: \"white\",\n                  fontSize: \"0.8rem\"\n                }\n          },\n          body: {\n              \"& td\":{\n                  padding: \"1pt\", \n                  fontSize: \"0.8rem\"\n                }\n          }, \n          footer: {\n              margin: \"0 auto\",\n              maxWidth: \"800px\",\n              width: \"95%\",\n            //   height: \"50px\",\n              \"& td\": {\n                  textAlign: \"center\",\n                  padding: \"1pt\"\n\n              }, \n              \"& th\": {\n                backgroundColor: \"#54DEFD\",\n                color: \"white\", \n                fontSize: \"0.8rem\",\n               padding: \"2pt\",\n               textAlign: \"center\"\n              }\n              \n            //   top: 1\n          }\n          \n        });\n\nexport const AmortTable = ({paymentData, scheduledInterest, totalInterest, loanTerm, extraPayment})=>{\n\n    const classes = useStyles()\n\n    const summaryFooter = () => {\n        if (extraPayment.length){\n            let savings = (parseFloat(scheduledInterest) - parseFloat(totalInterest))\n            return (\n        <Table >\n            <TableHead>\n                <TableRow>\n                    <TableCell>Months Early</TableCell>\n                    <TableCell>Actual Interest</TableCell>\n                    <TableCell>Savings</TableCell>\n                </TableRow>\n                </TableHead>\n                <TableBody>\n                <TableRow>\n                    <TableCell>{loanTerm - paymentData.length}</TableCell>\n                    <TableCell>{totalInterest.toLocaleString('en-US', {style: \"currency\", currency: \"USD\"})}</TableCell>\n                    <TableCell>{savings.toLocaleString('en-US', {style: \"currency\", currency: \"USD\"})}</TableCell>\n                </TableRow>\n            </TableBody>\n        </Table>\n            )\n        } else {\n            return (\n            <Table >\n                <TableHead>\n                <TableRow>\n                    \n                    <TableCell>Total Interest</TableCell>\n                    \n                </TableRow>\n                </TableHead>\n                <TableBody>\n                <TableRow>\n                    \n                    <TableCell>{totalInterest.toLocaleString('en-US', {style: \"currency\", currency: \"USD\"})}</TableCell>\n                </TableRow>\n            </TableBody>\n            </Table>\n            )\n        }\n    }\n\n\n    const paymentDetails = paymentData.map((payment, month) =>  {\n        const { ttlPayment, interestPaid, principlePaid,  remainingPrinciple} = payment\n        \n\n       \n\n        /**\n         * if condition for extra payments \n         * if extra payments foot displays:\n         *  - Base Interest \n         *  - Interest paid\n         *  - Money Saved\n         *  - Months Eary\n         */\n\n\n        return(\n            <TableRow hover key={month}>\n                <TableCell align=\"center\">{month + 1}</TableCell>\n                <TableCell align=\"center\">{ttlPayment}</TableCell>\n                <TableCell align=\"center\">{interestPaid}</TableCell>\n                <TableCell align=\"center\">{principlePaid}</TableCell>\n                <TableCell align=\"center\">{remainingPrinciple}</TableCell>\n            </TableRow>\n        )\n    })\n\n    return (\n        <>\n        <TableContainer className={classes.container} component={Paper}>\n            <Table stickyHeader=\"true\" className={classes.pageContainer} aria-label=\"simple table\" >\n                <TableHead className={classes.root} xs={12}>\n                    <TableRow  id=\"head\">\n                        <TableCell align=\"center\">Month</TableCell>\n                        <TableCell align=\"center\">Payment</TableCell>\n                        <TableCell align=\"center\">Interest</TableCell>\n                        <TableCell align=\"center\">Principle</TableCell>\n                        \n                        <TableCell align=\"center\">Balance</TableCell>\n                    </TableRow>\n                </TableHead>\n                <TableBody className={classes.body} xs={12}>\n                    {paymentDetails}\n                </TableBody>\n            </Table>\n                \n        </TableContainer>\n        <TableContainer component={Paper} className={classes.footer}>\n        {summaryFooter()}\n\n        </TableContainer>\n            \n        \n        \n                </>\n    )\n\n}\n","import React, {useState} from 'react'\nimport {Grid, makeStyles, TextField, Button} from '@material-ui/core'\nimport { AmortTable } from './amortTable'\nimport {calc} from './calculatorFunc'\n\nconst useStyles = makeStyles({\n    container: {\n        marginTop: \"30px\",\n        backgroundColor: \"lightestgrey\",\n        textAlign: \"center\",\n        height: \"100%\"\n    },\n    input: {\n        margin: \"5px\"\n    }\n})\n\nexport const CalcPage = () => {\n\n    // const [loanAmt, setLoanAmt] = useState(\"\")\n    // const [interestRate, setInterestRate] = useState(\"\")\n    // const [loanTerm, setLoanTerm] = useState(\"\")\n    const [inputs, setInputs] = useState({loanAmt: \"\", interestRate: \"\", loanTerm: \"\", extraPayment: \"\"})\n    const [paymentData, setPaymentData] = useState([])\n    const [scheduledInterest, setScheduledInterest] = useState()\n    const [totalInterest, setTotalInterest] = useState()\n    const [displayTable, setDisplayTable] = useState(false)\n/**Calculations\n *  - set a state variable as array to store individual payments\n *  - if extra payments is blank run calcs\n *  - if extrapayments run base calc to get total interest paid amount\n *      - run extra calc to incorporate extrapayments\n */\n\n    const classes = useStyles()\n\n    const handleChange = (e)=> {\n        let newState ={...inputs, [e.target.name]: e.target.value}\n        return setInputs(newState)\n\n    }\n\n    const runCalcs = (e) =>  {\n        \n        let results = calc(inputs)\n        \n       \n        setPaymentData(results.paymentData)\n        setScheduledInterest(results.scheduledInterest)\n        setTotalInterest(results.totalInterest)\n        setDisplayTable(true)\n\n    }\n\n    const table = displayTable ? ( <AmortTable paymentData={paymentData} \n                    loanTerm={inputs.loanTerm}\n                    scheduledInterest={scheduledInterest}\n                    totalInterest={totalInterest}\n                    extraPayment={inputs.extraPayment}\n                    /> ) : \"\"\n\n    const {loanAmt, interestRate, loanTerm, extraPayment} = inputs\n\n    return (\n\n        <Grid container className={classes.container}>\n            <Grid item xs={false} sm={2}></Grid>\n            <Grid item xs={12} sm={8}> \n            <Grid container>\n            <Grid item xs={12} sm={6}>\n                <TextField className={classes.input} label=\"Loan Amount\" type=\"text\"\n                    onChange={handleChange}\n                    value={loanAmt}\n                    name=\"loanAmt\"\n                    placeholder=\"No Commas or Periods\"\n                    \n                    />\n            </Grid>\n            <Grid item xs={12} sm={6}>\n                <TextField className={classes.input} label=\"Interest Rate\" type=\"text\"\n                    onChange={handleChange}\n                    value={interestRate}\n                    name={\"interestRate\"}\n                    placeholder=\"ex.) 4.5\"\n                    \n                    />\n            </Grid>\n            <Grid item xs={12} sm={6}>\n                <TextField className={classes.input} label=\"Loan Term\" type=\"text\"\n                    onChange={handleChange}\n                    value={loanTerm}\n                    name={\"loanTerm\"}\n                    placeholder=\"Enter Term in Months\"\n                    \n                    />\n            </Grid>\n            <Grid item xs={12} sm={6}>\n                <TextField className={classes.input} label=\"Extra Payment\" type=\"text\"\n                    onChange={handleChange}\n                    value={extraPayment}\n                    name={\"extraPayment\"}\n                    placeholder=\"No Commas or Periods\"\n                    \n                    />\n            </Grid>\n            <Grid item xs={false} sm={4}/>\n            \n            <Grid item xs={false} sm={4}/>\n                {table}\n               \n            </Grid>\n\n            </Grid>\n            <Grid item xs={false} sm={2}></Grid>\n            <Grid style={{margin: \"8px auto\", }} item xs={12} sm={4}>\n                <Button  variant=\"outlined\" color=\"primary\" onClick={(e)=>runCalcs(e)}>Calculate</Button>\n            </Grid>\n        </Grid>\n    )\n}","import currency from 'currency.js'\n\n/**\n * M = P[r(1+r)^n/((1+r)^n)-1)]\n\nM = the total monthly mortgage payment\nP = the principal loan amount\nr = your monthly interest rate. Lenders provide you an annual \nrate so you’ll need to divide that figure by 12 (the number of months in a year) \nto get the monthly rate. \nIf your interest rate is 5%, your monthly rate would be 0.004167 (0.05/12=0.004167).\nn = number of payments over the loan’s lifetime. \nMultiply the number of years in your loan term by 12 \n(the number of months in a year) to get the number of total payments for your loan. \nFor example, a 30-year fixed mortgage would have 360 payments (30x12=360).\n */\n\n\n \n\n    \n export const calc = ({loanAmt, interestRate, loanTerm, extraPayment = 0}) => {\n    let payments = []\n    let balance = currency(loanAmt).value\n    let scheduledBalance = currency(loanAmt).value\n    let extra = extraPayment * 1\n\n    let r = ((interestRate/100) /12)\n    // let i = (balance * r * Math.pow(1 + r, loanTerm))\n    let v = r * Math.pow(1 + r, loanTerm)\n    let i = currency(balance).multiply(v) \n    let j = Math.pow(1 + r,  loanTerm) - 1\n    let payment = currency(i).divide(j)\n\n    let totalInterest = 0\n    let scheduledInterest = 0\n    \n    /**\n     * calculate interest savings with extra payments\n     *  - if extra payments > 0\n     *  - run a base calc without extra payments and sum intrest values into a variable\n     *  - compare two calcs\n     *  - do same with number of months\n     */\n    \n\n    const calcScheduled = (payment) => {\n        let checker2 = payment.value \n        let interest\n        while (scheduledBalance > 0){\n\n            if (checker2 < scheduledBalance){\n                \n                interest = currency(scheduledBalance).multiply(r)\n                scheduledInterest += interest.value \n                let princePayment = payment.subtract(interest)\n                scheduledBalance = currency(scheduledBalance).subtract(princePayment).value\n            } else {\n                interest = currency(scheduledBalance).multiply(r)\n                scheduledInterest += interest.value \n                payment = scheduledBalance\n                scheduledBalance = 0\n                \n            }\n            \n        }\n    }\n\n    calcScheduled(payment)\n\n\n    while (balance > 0){\n        let checker = payment.value\n        if ( checker < balance){\n\n        let extraPayment = payment.add(extra)\n\n        let interestPaid = currency(balance).multiply(r)\n            totalInterest += interestPaid.value\n        let principlePaid = extraPayment.subtract(interestPaid)\n        \n            balance = currency(balance).subtract(principlePaid).value\n\n              \n        let paymentObj = {\n            \n            ttlPayment: extraPayment.value.toLocaleString('en-US', {style: \"currency\", currency: \"USD\"}) ,\n            interestPaid: interestPaid.value.toLocaleString('en-US', {style: \"currency\", currency: \"USD\"}),  \n            principlePaid: principlePaid.value.toLocaleString('en-US', {style: \"currency\", currency: \"USD\"}), \n            extraPayment: extra,\n            remainingPrinciple: balance.toLocaleString('en-US', {style: \"currency\", currency: \"USD\"})\n        }\n        payments.push(paymentObj)\n    }\n        else {\n            let ttlPayment = balance \n            let interestPaid = currency(balance).multiply(r)\n            totalInterest += interestPaid.value\n            let principlePaid = ttlPayment - interestPaid\n            balance = 0\n\n            let paymentObj = {\n            \n            ttlPayment: ttlPayment.toLocaleString('en-US', {style: \"currency\", currency: \"USD\"}),\n            interestPaid: interestPaid.value.toLocaleString('en-US', {style: \"currency\", currency: \"USD\"}),  \n            principlePaid: principlePaid.toLocaleString('en-US', {style: \"currency\", currency: \"USD\"}), \n            extraPayment: extra,\n            remainingPrinciple: balance.toLocaleString('en-US', {style: \"currency\", currency: \"USD\"})\n        }\n        payments.push(paymentObj)\n        }\n    }\n   \n    /**\n     * return an object paymentsObj = {\n     * paymentData: payments, scheduledInterest, totalInterest\n     * }\n     */\n        let paymentsObj ={\n            paymentData: payments, \n            scheduledInterest, \n            totalInterest\n        }\n\n    return  paymentsObj\n   \n}\n \n","\nimport './App.css';\nimport { CalcPage } from './components/calcPage';\nimport {AppBar, makeStyles} from '@material-ui/core'\n\n\nconst useStyles = makeStyles({\n  appbar: {\n    textAlign: \"center\",\n    height: \"30px\",\n    lineHeight: \"30px\"\n  }\n})\n\nfunction App() {\n  const classes = useStyles()\n  return (\n    <>\n    <AppBar className={classes.appbar} position=\"fixed\"> Mortagage Calculator\n      \n    </AppBar>\n      <CalcPage/>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}